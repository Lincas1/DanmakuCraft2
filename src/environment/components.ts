import {EventDispatcher, EventType} from '../util';
import {CommentData} from '../comment';

/**
 * Declares every classes with which the game can communicate with the environment.
 */
export interface EnvironmentAdapter {
  getGameContainerProvider(): GameContainerProvider;

  getCommentProvider(): CommentProvider;
}

export interface GameContainerProvider {
  getContainer(): HTMLElement;
}

export class NewCommentEvent extends CustomEvent {
  static type: EventType = 'newComment';

  constructor(comment: CommentData) {
    super(NewCommentEvent.type, {detail: comment});
  }
}

export abstract class CommentProvider extends EventDispatcher<NewCommentEvent> {
  static NEW_COMMENT: EventType = NewCommentEvent.type;

  /**
   * Get all currently available comments.
   * This operation is probably expensive, so listen on NEW_COMMENT for new comments.
   */
  abstract async getAllComments(): Promise<CommentData[]>;
}

export class WorldProxy {
  /**
   * Checks if `text` can be placed in the world. Probably triggers some notification
   * in game if request is rejected.
   */
  // TODO somehow trigger notification event: cannot place comment here. notification is generated by game itself.
  requestForPlacingComment(text: string, size: number): boolean {
    throw new Error('Not implemented');
  }

  getPlayer() {
    throw new Error('Not implemented');
  }

  // Player: EffectManager, PlayerEntity

  // TODO move to World class
  // canPlaceComment(text: string): boolean {
  //   return true;
  // }
  //
  // sendNotification(text: string) {
  //
  // }
}
